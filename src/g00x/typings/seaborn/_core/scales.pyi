"""
This type stub file was generated by pyright.
"""

from collections.abc import Sequence
from dataclasses import dataclass
from typing import TYPE_CHECKING, Any, Callable, ClassVar, Optional, Tuple

from matplotlib.scale import ScaleBase
from matplotlib.ticker import Formatter, Locator
from numpy.typing import ArrayLike
from pandas import Series
from seaborn._core.typing import Default

if TYPE_CHECKING:
    TransFuncs = Tuple[Callable[[ArrayLike], ArrayLike], Callable[[ArrayLike], ArrayLike]]
    Pipeline = Sequence[Optional[Callable[[Any], Any]]]

class Scale:
    """Base class for objects that map data values to visual properties."""

    values: tuple | str | list | dict | None
    _priority: ClassVar[int]
    _pipeline: Pipeline
    _matplotlib_scale: ScaleBase
    _spacer: staticmethod
    _legend: tuple[list[str], list[Any]] | None
    def __post_init__(self):  # -> None:
        ...
    def tick(self): ...
    def label(self): ...
    def __call__(self, data: Series) -> ArrayLike: ...

@dataclass
class Nominal(Scale):
    """
    A categorical scale without relative importance / magnitude.
    """

    values: tuple | str | list | dict | None = ...
    order: list | None = ...
    _priority: ClassVar[int] = ...
    def tick(self, locator: Locator | None = ...):  # -> Self@Nominal:
        """
        Configure the selection of ticks for the scale's axis or legend.

        .. note::
            This API is under construction and will be enhanced over time.
            At the moment, it is probably not very useful.

        Parameters
        ----------
        locator : :class:`matplotlib.ticker.Locator` subclass
            Pre-configured matplotlib locator; other parameters will not be used.

        Returns
        -------
        Copy of self with new tick configuration.

        """
        ...
    def label(self, formatter: Formatter | None = ...):  # -> Self@Nominal:
        """
        Configure the selection of labels for the scale's axis or legend.

        .. note::
            This API is under construction and will be enhanced over time.
            At the moment, it is probably not very useful.

        Parameters
        ----------
        formatter : :class:`matplotlib.ticker.Formatter` subclass
            Pre-configured matplotlib formatter; other parameters will not be used.

        Returns
        -------
        scale
            Copy of self with new tick configuration.

        """
        ...

@dataclass
class Ordinal(Scale): ...

@dataclass
class Discrete(Scale): ...

@dataclass
class ContinuousBase(Scale):
    values: tuple | str | None = ...
    norm: tuple | None = ...

@dataclass
class Continuous(ContinuousBase):
    """
    A numeric scale supporting norms and functional transforms.
    """

    values: tuple | str | None = ...
    trans: str | TransFuncs | None = ...
    _priority: ClassVar[int] = ...
    def tick(
        self,
        locator: Locator | None = ...,
        *,
        at: Sequence[float] = ...,
        upto: int | None = ...,
        count: int | None = ...,
        every: float | None = ...,
        between: tuple[float, float] | None = ...,
        minor: int | None = ...
    ) -> Continuous:
        """
        Configure the selection of ticks for the scale's axis or legend.

        Parameters
        ----------
        locator : :class:`matplotlib.ticker.Locator` subclass
            Pre-configured matplotlib locator; other parameters will not be used.
        at : sequence of floats
            Place ticks at these specific locations (in data units).
        upto : int
            Choose "nice" locations for ticks, but do not exceed this number.
        count : int
            Choose exactly this number of ticks, bounded by `between` or axis limits.
        every : float
            Choose locations at this interval of separation (in data units).
        between : pair of floats
            Bound upper / lower ticks when using `every` or `count`.
        minor : int
            Number of unlabeled ticks to draw between labeled "major" ticks.

        Returns
        -------
        scale
            Copy of self with new tick configuration.

        """
        ...
    def label(
        self,
        formatter: Formatter | None = ...,
        *,
        like: str | Callable | None = ...,
        base: int | None | Default = ...,
        unit: str | None = ...
    ) -> Continuous:
        """
        Configure the appearance of tick labels for the scale's axis or legend.

        Parameters
        ----------
        formatter : :class:`matplotlib.ticker.Formatter` subclass
            Pre-configured formatter to use; other parameters will be ignored.
        like : str or callable
            Either a format pattern (e.g., `".2f"`), a format string with fields named
            `x` and/or `pos` (e.g., `"${x:.2f}"`), or a callable that consumes a number
            and returns a string.
        base : number
            Use log formatter (with scientific notation) having this value as the base.
            Set to `None` to override the default formatter with a log transform.
        unit : str or (str, str) tuple
            Use  SI prefixes with these units (e.g., with `unit="g"`, a tick value
            of 5000 will appear as `5 kg`). When a tuple, the first element gives the
            separator between the number and unit.

        Returns
        -------
        scale
            Copy of self with new label configuration.

        """
        ...

@dataclass
class Temporal(ContinuousBase):
    """
    A scale for date/time data.
    """

    trans = ...
    _priority: ClassVar[int] = ...
    def tick(self, locator: Locator | None = ..., *, upto: int | None = ...) -> Temporal:
        """
        Configure the selection of ticks for the scale's axis or legend.

        .. note::
            This API is under construction and will be enhanced over time.

        Parameters
        ----------
        locator : :class:`matplotlib.ticker.Locator` subclass
            Pre-configured matplotlib locator; other parameters will not be used.
        upto : int
            Choose "nice" locations for ticks, but do not exceed this number.

        Returns
        -------
        scale
            Copy of self with new tick configuration.

        """
        ...
    def label(self, formatter: Formatter | None = ..., *, concise: bool = ...) -> Temporal:
        """
        Configure the appearance of tick labels for the scale's axis or legend.

        .. note::
            This API is under construction and will be enhanced over time.

        Parameters
        ----------
        formatter : :class:`matplotlib.ticker.Formatter` subclass
            Pre-configured formatter to use; other parameters will be ignored.
        concise : bool
            If True, use :class:`matplotlib.dates.ConciseDateFormatter` to make
            the tick labels as compact as possible.

        Returns
        -------
        scale
            Copy of self with new label configuration.

        """
        ...

class PseudoAxis:
    """
    Internal class implementing minimal interface equivalent to matplotlib Axis.

    Coordinate variables are typically scaled by attaching the Axis object from
    the figure where the plot will end up. Matplotlib has no similar concept of
    and axis for the other mappable variables (color, etc.), but to simplify the
    code, this object acts like an Axis and can be used to scale other variables.

    """

    axis_name = ...
    def __init__(self, scale) -> None: ...
    def set_view_interval(self, vmin, vmax):  # -> None:
        ...
    def get_view_interval(self):  # -> tuple[Unknown, Unknown]:
        ...
    def set_data_interval(self, vmin, vmax):  # -> None:
        ...
    def get_data_interval(self):  # -> tuple[None, None] | tuple[Unknown, Unknown]:
        ...
    def get_tick_space(self):  # -> Literal[5]:
        ...
    def set_major_locator(self, locator):  # -> None:
        ...
    def set_major_formatter(self, formatter):  # -> None:
        ...
    def set_minor_locator(self, locator):  # -> None:
        ...
    def set_minor_formatter(self, formatter):  # -> None:
        ...
    def set_units(self, units):  # -> None:
        ...
    def update_units(self, x):  # -> None:
        """Pass units to the internal converter, potentially updating its mapping."""
        ...
    def convert_units(self, x):
        """Return a numeric representation of the input data."""
        ...
    def get_scale(self):  # -> Unknown:
        ...
    def get_majorticklocs(self): ...
