"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, List, Optional, Tuple, Union

from matplotlib.path import Path
from pandas import Series
from seaborn._compat import MarkerStyle
from seaborn._core.scales import Nominal, Scale

RGBTuple = Tuple[float, float, float]
RGBATuple = Tuple[float, float, float, float]
ColorSpec = Union[RGBTuple, RGBATuple, str]
DashPattern = Tuple[float, ...]
DashPatternWithOffset = Tuple[float, Optional[DashPattern]]
MarkerPattern = Union[float, str, Tuple[int, int, float], List[Tuple[float, float]], Path, MarkerStyle,]
class Property:
    """Base class for visual properties that can be set directly or be data scaling."""
    legend = ...
    normed = ...
    def __init__(self, variable: str | None = ...) -> None:
        """Initialize the property with the name of the corresponding plot variable."""
        ...

    def default_scale(self, data: Series) -> Scale:
        """Given data, initialize appropriate scale class."""
        ...

    def infer_scale(self, arg: Any, data: Series) -> Scale:
        """Given data and a scaling argument, initialize appropriate scale class."""
        ...

    def get_mapping(self, scale: Scale, data: Series) -> Callable[[ArrayLike], ArrayLike]:
        """Return a function that maps from data domain to property range."""
        ...

    def standardize(self, val: Any) -> Any:
        """Coerce flexible property value to standardized representation."""
        ...



class Coordinate(Property):
    """The position of visual marks with respect to the axes of the plot."""
    legend = ...
    normed = ...


class IntervalProperty(Property):
    """A numeric property where scale range can be defined as an interval."""
    legend = ...
    normed = ...
    _default_range: tuple[float, float] = ...
    @property
    def default_range(self) -> tuple[float, float]:
        """Min and max values used by default for semantic mapping."""
        ...

    def infer_scale(self, arg: Any, data: Series) -> Scale:
        """Given data and a scaling argument, initialize appropriate scale class."""
        ...

    def get_mapping(self, scale: Scale, data: ArrayLike) -> Callable[[ArrayLike], ArrayLike]:
        """Return a function that maps from data domain to property range."""
        ...



class PointSize(IntervalProperty):
    """Size (diameter) of a point mark, in points, with scaling by area."""
    _default_range = ...


class LineWidth(IntervalProperty):
    """Thickness of a line mark, in points."""
    @property
    def default_range(self) -> tuple[float, float]:
        """Min and max values used by default for semantic mapping."""
        ...



class EdgeWidth(IntervalProperty):
    """Thickness of the edges on a patch mark, in points."""
    @property
    def default_range(self) -> tuple[float, float]:
        """Min and max values used by default for semantic mapping."""
        ...



class Stroke(IntervalProperty):
    """Thickness of lines that define point glyphs."""
    _default_range = ...


class Alpha(IntervalProperty):
    """Opacity of the color values for an arbitrary mark."""
    _default_range = ...


class Offset(IntervalProperty):
    """Offset for edge-aligned text, in point units."""
    _default_range = ...
    _legend = ...


class FontSize(IntervalProperty):
    """Font size for textual marks, in points."""
    _legend = ...
    @property
    def default_range(self) -> tuple[float, float]:
        """Min and max values used by default for semantic mapping."""
        ...



class ObjectProperty(Property):
    """A property defined by arbitrary an object, with inherently nominal scaling."""
    legend = ...
    normed = ...
    null_value: Any = ...
    def default_scale(self, data: Series) -> Nominal:
        ...

    def infer_scale(self, arg: Any, data: Series) -> Nominal:
        ...

    def get_mapping(self, scale: Scale, data: Series) -> Callable[[ArrayLike], list]:
        """Define mapping as lookup into list of object values."""
        ...



class Marker(ObjectProperty):
    """Shape of points in scatter-type marks or lines with data points marked."""
    null_value = ...
    def standardize(self, val: MarkerPattern) -> MarkerStyle:
        ...



class LineStyle(ObjectProperty):
    """Dash pattern for line-type marks."""
    null_value = ...
    def standardize(self, val: str | DashPattern) -> DashPatternWithOffset:
        ...



class TextAlignment(ObjectProperty):
    legend = ...


class HorizontalAlignment(TextAlignment):
    ...


class VerticalAlignment(TextAlignment):
    ...


class Color(Property):
    """Color, as RGB(A), scalable with nominal palettes or continuous gradients."""
    legend = ...
    normed = ...
    def standardize(self, val: ColorSpec) -> RGBTuple | RGBATuple:
        ...

    def infer_scale(self, arg: Any, data: Series) -> Scale:
        ...

    def get_mapping(self, scale: Scale, data: Series) -> Callable[[ArrayLike], ArrayLike]:
        """Return a function that maps from data domain to color values."""
        ...



class Fill(Property):
    """Boolean property of points/bars/patches that can be solid or outlined."""
    legend = ...
    normed = ...
    def standardize(self, val: Any) -> bool:
        ...

    def default_scale(self, data: Series) -> Nominal:
        """Given data, initialize appropriate scale class."""
        ...

    def infer_scale(self, arg: Any, data: Series) -> Scale:
        """Given data and a scaling argument, initialize appropriate scale class."""
        ...

    def get_mapping(self, scale: Scale, data: Series) -> Callable[[ArrayLike], ArrayLike]:
        """Return a function that maps each data value to True or False."""
        ...



PROPERTY_CLASSES = ...
PROPERTIES = ...
